// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: userAuth.sql

package db

import (
	"context"
	"database/sql"
)

const createUserAuth = `-- name: CreateUserAuth :one
INSERT INTO user_auth (
    user_id, refresh_token, expires_at
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, refresh_token, expires_at, created_at, updated_at
`

type CreateUserAuthParams struct {
	UserID       int64          `json:"user_id"`
	RefreshToken sql.NullString `json:"refresh_token"`
	ExpiresAt    sql.NullTime   `json:"expires_at"`
}

func (q *Queries) CreateUserAuth(ctx context.Context, arg CreateUserAuthParams) (UserAuth, error) {
	row := q.db.QueryRowContext(ctx, createUserAuth, arg.UserID, arg.RefreshToken, arg.ExpiresAt)
	var i UserAuth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredUserAuth = `-- name: DeleteExpiredUserAuth :exec
DELETE FROM user_auth
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredUserAuth(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredUserAuth)
	return err
}

const deleteUserAuth = `-- name: DeleteUserAuth :exec
DELETE FROM user_auth
WHERE id = $1
`

func (q *Queries) DeleteUserAuth(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserAuth, id)
	return err
}

const getUserAuthByToken = `-- name: GetUserAuthByToken :one
SELECT id, user_id, refresh_token, expires_at, created_at, updated_at FROM user_auth
WHERE refresh_token = $1 AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetUserAuthByToken(ctx context.Context, refreshToken sql.NullString) (UserAuth, error) {
	row := q.db.QueryRowContext(ctx, getUserAuthByToken, refreshToken)
	var i UserAuth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAuthByUserID = `-- name: GetUserAuthByUserID :one
SELECT id, user_id, refresh_token, expires_at, created_at, updated_at FROM user_auth
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetUserAuthByUserID(ctx context.Context, userID int64) (UserAuth, error) {
	row := q.db.QueryRowContext(ctx, getUserAuthByUserID, userID)
	var i UserAuth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserAuth = `-- name: UpdateUserAuth :one
UPDATE user_auth
SET refresh_token = $2,
    expires_at = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, refresh_token, expires_at, created_at, updated_at
`

type UpdateUserAuthParams struct {
	ID           int64          `json:"id"`
	RefreshToken sql.NullString `json:"refresh_token"`
	ExpiresAt    sql.NullTime   `json:"expires_at"`
}

func (q *Queries) UpdateUserAuth(ctx context.Context, arg UpdateUserAuthParams) (UserAuth, error) {
	row := q.db.QueryRowContext(ctx, updateUserAuth, arg.ID, arg.RefreshToken, arg.ExpiresAt)
	var i UserAuth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
