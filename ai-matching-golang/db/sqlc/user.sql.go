// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    cognito_id, email, first_name, last_name
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, cognito_id, email, is_system_admin, first_name, last_name, created_at, updated_at
`

type CreateUserParams struct {
	CognitoID string         `json:"cognito_id"`
	Email     string         `json:"email"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.CognitoID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Email,
		&i.IsSystemAdmin,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1::uuid
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, cognito_id, email, is_system_admin, first_name, last_name, created_at, updated_at FROM users
WHERE id = $1::uuid LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Email,
		&i.IsSystemAdmin,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByCognitoID = `-- name: GetUserByCognitoID :one
SELECT id, cognito_id, email, is_system_admin, first_name, last_name, created_at, updated_at FROM users
WHERE cognito_id = $1 LIMIT 1
`

func (q *Queries) GetUserByCognitoID(ctx context.Context, cognitoID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByCognitoID, cognitoID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Email,
		&i.IsSystemAdmin,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, cognito_id, email, is_system_admin, first_name, last_name, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Email,
		&i.IsSystemAdmin,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithTenants = `-- name: GetUserWithTenants :one
SELECT
    u.id, u.cognito_id, u.email, u.is_system_admin, u.first_name, u.last_name, u.created_at, u.updated_at,
    COUNT(DISTINCT tu.tenant_id) as tenant_count
FROM users u
         LEFT JOIN tenant_users tu ON u.id = tu.user_id
WHERE u.id = $1::uuid
GROUP BY u.id
`

type GetUserWithTenantsRow struct {
	ID            uuid.UUID      `json:"id"`
	CognitoID     string         `json:"cognito_id"`
	Email         string         `json:"email"`
	IsSystemAdmin bool           `json:"is_system_admin"`
	FirstName     sql.NullString `json:"first_name"`
	LastName      sql.NullString `json:"last_name"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	TenantCount   int64          `json:"tenant_count"`
}

func (q *Queries) GetUserWithTenants(ctx context.Context, id uuid.UUID) (GetUserWithTenantsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWithTenants, id)
	var i GetUserWithTenantsRow
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Email,
		&i.IsSystemAdmin,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TenantCount,
	)
	return i, err
}

const getUsersNotInTenant = `-- name: GetUsersNotInTenant :many
SELECT u.id, u.cognito_id, u.email, u.is_system_admin, u.first_name, u.last_name, u.created_at, u.updated_at
FROM users u
WHERE u.id NOT IN (
    SELECT user_id FROM tenant_users WHERE tenant_id = $1
)
ORDER BY u.email
LIMIT $2 OFFSET $3
`

type GetUsersNotInTenantParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) GetUsersNotInTenant(ctx context.Context, arg GetUsersNotInTenantParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersNotInTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CognitoID,
			&i.Email,
			&i.IsSystemAdmin,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, cognito_id, email, is_system_admin, first_name, last_name, created_at, updated_at FROM users
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CognitoID,
			&i.Email,
			&i.IsSystemAdmin,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $1,
    first_name = $2,
    last_name = $3,
    updated_at = NOW()
WHERE id = $4::uuid
RETURNING id, cognito_id, email, is_system_admin, first_name, last_name, created_at, updated_at
`

type UpdateUserParams struct {
	Email     string         `json:"email"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Email,
		&i.IsSystemAdmin,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
