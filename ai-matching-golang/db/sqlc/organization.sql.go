// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organization.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countOrganizations = `-- name: CountOrganizations :one
SELECT COUNT(*) FROM organizations
WHERE is_active = true
`

func (q *Queries) CountOrganizations(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOrganizations)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
    name, description, is_active
) VALUES (
    $1, $2, $3
)
RETURNING id, name, description, is_active, created_at, updated_at
`

type CreateOrganizationParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.Name, arg.Description, arg.IsActive)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1::uuid
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, description, is_active, created_at, updated_at FROM organizations
WHERE id = $1::uuid LIMIT 1
`

func (q *Queries) GetOrganization(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganizationByTenant = `-- name: GetOrganizationByTenant :one
SELECT o.id, o.name, o.description, o.is_active, o.created_at, o.updated_at FROM organizations o
INNER JOIN tenants t ON o.id = t.organization_id
WHERE t.id = $1::uuid
LIMIT 1
`

func (q *Queries) GetOrganizationByTenant(ctx context.Context, tenantID uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByTenant, tenantID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganizationWithTenants = `-- name: GetOrganizationWithTenants :one
SELECT 
    o.id, o.name, o.description, o.is_active, o.created_at, o.updated_at,
    COUNT(t.id) as tenant_count
FROM organizations o
LEFT JOIN tenants t ON o.id = t.organization_id AND t.is_active = true
WHERE o.id = $1::uuid
GROUP BY o.id
`

type GetOrganizationWithTenantsRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	TenantCount int64          `json:"tenant_count"`
}

func (q *Queries) GetOrganizationWithTenants(ctx context.Context, id uuid.UUID) (GetOrganizationWithTenantsRow, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationWithTenants, id)
	var i GetOrganizationWithTenantsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TenantCount,
	)
	return i, err
}

const getTenantsByOrganization = `-- name: GetTenantsByOrganization :many
SELECT id, organization_id, name, subdomain, is_active, created_at, updated_at FROM tenants
WHERE organization_id = $1::uuid AND is_active = true
ORDER BY name
`

func (q *Queries) GetTenantsByOrganization(ctx context.Context, organizationID uuid.UUID) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, getTenantsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Subdomain,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, name, description, is_active, created_at, updated_at FROM organizations
WHERE is_active = true
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListOrganizationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrganizations(ctx context.Context, arg ListOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET name = $1,
    description = $2,
    is_active = $3,
    updated_at = NOW()
WHERE id = $4::uuid
RETURNING id, name, description, is_active, created_at, updated_at
`

type UpdateOrganizationParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.ID,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
