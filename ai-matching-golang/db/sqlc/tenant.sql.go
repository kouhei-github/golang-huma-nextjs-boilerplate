// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tenant.sql

package db

import (
	"context"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (
    organization_id, name, subdomain, is_active
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, organization_id, name, subdomain, is_active, created_at, updated_at
`

type CreateTenantParams struct {
	OrganizationID int64  `json:"organization_id"`
	Name           string `json:"name"`
	Subdomain      string `json:"subdomain"`
	IsActive       bool   `json:"is_active"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant,
		arg.OrganizationID,
		arg.Name,
		arg.Subdomain,
		arg.IsActive,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, id)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT id, organization_id, name, subdomain, is_active, created_at, updated_at FROM tenants
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTenant(ctx context.Context, id int64) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantBySubdomain = `-- name: GetTenantBySubdomain :one
SELECT id, organization_id, name, subdomain, is_active, created_at, updated_at FROM tenants
WHERE subdomain = $1 AND is_active = true
LIMIT 1
`

func (q *Queries) GetTenantBySubdomain(ctx context.Context, subdomain string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantBySubdomain, subdomain)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTenantsByOrganization = `-- name: ListTenantsByOrganization :many
SELECT id, organization_id, name, subdomain, is_active, created_at, updated_at FROM tenants
WHERE organization_id = $1 AND is_active = true
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListTenantsByOrganizationParams struct {
	OrganizationID int64 `json:"organization_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListTenantsByOrganization(ctx context.Context, arg ListTenantsByOrganizationParams) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, listTenantsByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Subdomain,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET name = $2,
    subdomain = $3,
    is_active = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, organization_id, name, subdomain, is_active, created_at, updated_at
`

type UpdateTenantParams struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	Subdomain string `json:"subdomain"`
	IsActive  bool   `json:"is_active"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant,
		arg.ID,
		arg.Name,
		arg.Subdomain,
		arg.IsActive,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
