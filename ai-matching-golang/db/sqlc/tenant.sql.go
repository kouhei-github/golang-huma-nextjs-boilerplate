// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tenant.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkUserBelongsToTenant = `-- name: CheckUserBelongsToTenant :one
SELECT EXISTS(
    SELECT 1 FROM tenant_users
    WHERE tenant_id = $1::uuid AND user_id = $2::uuid
) as belongs
`

type CheckUserBelongsToTenantParams struct {
	TenantID uuid.UUID `json:"tenant_id"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) CheckUserBelongsToTenant(ctx context.Context, arg CheckUserBelongsToTenantParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserBelongsToTenant, arg.TenantID, arg.UserID)
	var belongs bool
	err := row.Scan(&belongs)
	return belongs, err
}

const countTenantsByOrganization = `-- name: CountTenantsByOrganization :one
SELECT COUNT(*) FROM tenants
WHERE organization_id = $1::uuid AND is_active = true
`

func (q *Queries) CountTenantsByOrganization(ctx context.Context, organizationID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTenantsByOrganization, organizationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (
    organization_id, name, subdomain, is_active
) VALUES (
    $1::uuid, $2, $3, $4
)
RETURNING id, organization_id, name, subdomain, is_active, created_at, updated_at
`

type CreateTenantParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
	Subdomain      string    `json:"subdomain"`
	IsActive       bool      `json:"is_active"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant,
		arg.OrganizationID,
		arg.Name,
		arg.Subdomain,
		arg.IsActive,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants
WHERE id = $1::uuid
`

func (q *Queries) DeleteTenant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, id)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT id, organization_id, name, subdomain, is_active, created_at, updated_at FROM tenants
WHERE id = $1::uuid LIMIT 1
`

func (q *Queries) GetTenant(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantBySubdomain = `-- name: GetTenantBySubdomain :one
SELECT id, organization_id, name, subdomain, is_active, created_at, updated_at FROM tenants
WHERE subdomain = $1 AND is_active = true
LIMIT 1
`

func (q *Queries) GetTenantBySubdomain(ctx context.Context, subdomain string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantBySubdomain, subdomain)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantWithUserCount = `-- name: GetTenantWithUserCount :one
SELECT 
    t.id, t.organization_id, t.name, t.subdomain, t.is_active, t.created_at, t.updated_at,
    COUNT(DISTINCT tu.user_id) as user_count
FROM tenants t
LEFT JOIN tenant_users tu ON t.id = tu.tenant_id
WHERE t.id = $1::uuid
GROUP BY t.id
`

type GetTenantWithUserCountRow struct {
	ID             uuid.UUID `json:"id"`
	OrganizationID uuid.UUID `json:"organization_id"`
	Name           string    `json:"name"`
	Subdomain      string    `json:"subdomain"`
	IsActive       bool      `json:"is_active"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	UserCount      int64     `json:"user_count"`
}

func (q *Queries) GetTenantWithUserCount(ctx context.Context, id uuid.UUID) (GetTenantWithUserCountRow, error) {
	row := q.db.QueryRowContext(ctx, getTenantWithUserCount, id)
	var i GetTenantWithUserCountRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserCount,
	)
	return i, err
}

const getTenantsByUserID = `-- name: GetTenantsByUserID :many
SELECT t.id, t.organization_id, t.name, t.subdomain, t.is_active, t.created_at, t.updated_at, tu.role
FROM tenants t
INNER JOIN tenant_users tu ON t.id = tu.tenant_id
WHERE tu.user_id = $1::uuid AND t.is_active = true
ORDER BY t.name
`

type GetTenantsByUserIDRow struct {
	ID             uuid.UUID      `json:"id"`
	OrganizationID uuid.UUID      `json:"organization_id"`
	Name           string         `json:"name"`
	Subdomain      string         `json:"subdomain"`
	IsActive       bool           `json:"is_active"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	Role           sql.NullString `json:"role"`
}

func (q *Queries) GetTenantsByUserID(ctx context.Context, userID uuid.UUID) ([]GetTenantsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTenantsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTenantsByUserIDRow{}
	for rows.Next() {
		var i GetTenantsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Subdomain,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTenantsByOrganization = `-- name: ListTenantsByOrganization :many
SELECT id, organization_id, name, subdomain, is_active, created_at, updated_at FROM tenants
WHERE organization_id = $3::uuid AND is_active = true
ORDER BY id
    LIMIT $1 OFFSET $2
`

type ListTenantsByOrganizationParams struct {
	Limit          int32     `json:"limit"`
	Offset         int32     `json:"offset"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

func (q *Queries) ListTenantsByOrganization(ctx context.Context, arg ListTenantsByOrganizationParams) ([]Tenant, error) {
	rows, err := q.db.QueryContext(ctx, listTenantsByOrganization, arg.Limit, arg.Offset, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Subdomain,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET name = $1,
    subdomain = $2,
    is_active = $3,
    updated_at = NOW()
WHERE id = $4::uuid
RETURNING id, organization_id, name, subdomain, is_active, created_at, updated_at
`

type UpdateTenantParams struct {
	Name      string    `json:"name"`
	Subdomain string    `json:"subdomain"`
	IsActive  bool      `json:"is_active"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant,
		arg.Name,
		arg.Subdomain,
		arg.IsActive,
		arg.ID,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Subdomain,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
