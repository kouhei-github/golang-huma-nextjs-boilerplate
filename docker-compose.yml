version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: clinic-rag-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-clinic_rag}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - clinic-rag-network

  cognito-local:
    image: jagregory/cognito-local:latest
    container_name: clinic-rag-cognito-local
    ports:
      - "9229:9229"
    volumes:
      - ./cognito/.cognito:/app/.cognito
      - ./cognito/init-cognito.sh:/docker-entrypoint-initdb.d/init-cognito.sh:ro
    environment:
      COGNITO_LOCAL_USERPOOLID: local_pool_id
      COGNITO_LOCAL_USERPOOLCLIENTID: local_client_id
      COGNITO_LOCAL_USERPOOLCLIENTSECRET: local_client_secret
      COGNITO_LOCAL_REGION: us-east-1
      COGNITO_LOCAL_DOMAIN: localhost:9229
    networks:
      - clinic-rag-network

  golang-app:
    build:
      context: ai-matching-golang
      target: builder
    container_name: ai-matching-golang-app
    ports:
      - "${PORT:-8080}:8080"
    environment:
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-clinic_rag}?sslmode=disable
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-clinic_rag}
      DB_SSL_MODE: ${DB_SSL_MODE:-disable}
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
      COGNITO_USER_POOL_ID: local_pool_id
      COGNITO_CLIENT_ID: local_client_id
      COGNITO_CLIENT_SECRET: local_client_secret
      COGNITO_ENDPOINT: http://cognito-local:9229
      COGNITO_AUTO_CONFIRM: "true"
      X_COMPANY_ID: ${X_COMPANY_ID}
      X_SYSTEM_ADMIN_ID: ${X_SYSTEM_ADMIN_ID}
    depends_on:
      postgres:
        condition: service_healthy
      cognito-local:
        condition: service_started
    volumes:
      - ./ai-matching-golang:/app
    command: air
    networks:
      - clinic-rag-network

  nextjs-app:
    build:
      context: ai-matching-nextjs
      dockerfile: Dockerfile
      target: builder
    container_name: ai-matching-nextjs-app
    ports:
      - "${NEXT_PORT:-3000}:3000"
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://golang-app:8080
    depends_on:
      - golang-app
    volumes:
      - ./ai-matching-nextjs:/app
      - nextjs_node_modules:/app/node_modules
    command: npm run dev
    networks:
      - clinic-rag-network

volumes:
  postgres_data:
  nextjs_node_modules:

networks:
  clinic-rag-network:
    driver: bridge
